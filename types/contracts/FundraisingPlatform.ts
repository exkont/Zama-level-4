/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FundraisingPlatformInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_addEncrypted"
      | "_fromExternal"
      | "_setupACL"
      | "campaignBalances"
      | "campaignCounter"
      | "campaigns"
      | "createCampaign"
      | "donate"
      | "endCampaign"
      | "getActiveCampaigns"
      | "getAllCampaigns"
      | "getCampaignBalance"
      | "getCampaignBasicInfo"
      | "getDonationAmount"
      | "getDonorsCount"
      | "getEncryptedTotalRaised"
      | "getProgressPercentage"
      | "getTotalCampaigns"
      | "isCampaignInitialized"
      | "owner"
      | "renounceOwnership"
      | "requestRefund"
      | "transferOwnership"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CampaignEnded"
      | "DonationMade"
      | "FundsWithdrawn"
      | "OwnershipTransferred"
      | "RefundIssued"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_addEncrypted",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_fromExternal",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setupACL",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignBasicInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationAmount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTotalRaised",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProgressPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignInitialized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fromExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_setupACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "campaignBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTotalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProgressPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    creator: AddressLike,
    title: string,
    targetAmount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    creator: string,
    title: string,
    targetAmount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
    title: string;
    targetAmount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignEndedEvent {
  export type InputTuple = [campaignId: BigNumberish];
  export type OutputTuple = [campaignId: bigint];
  export interface OutputObject {
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationMadeEvent {
  export type InputTuple = [campaignId: BigNumberish, donor: AddressLike];
  export type OutputTuple = [campaignId: bigint, donor: string];
  export interface OutputObject {
    campaignId: bigint;
    donor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    creator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    creator: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundIssuedEvent {
  export type InputTuple = [campaignId: BigNumberish, donor: AddressLike];
  export type OutputTuple = [campaignId: bigint, donor: string];
  export interface OutputObject {
    campaignId: bigint;
    donor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FundraisingPlatform extends BaseContract {
  connect(runner?: ContractRunner | null): FundraisingPlatform;
  waitForDeployment(): Promise<this>;

  interface: FundraisingPlatformInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _addEncrypted: TypedContractMethod<
    [a: BytesLike, b: BytesLike],
    [string],
    "nonpayable"
  >;

  _fromExternal: TypedContractMethod<
    [_encryptedAmount: BytesLike, _proof: BytesLike],
    [string],
    "nonpayable"
  >;

  _setupACL: TypedContractMethod<
    [_campaignId: BigNumberish, donor: AddressLike],
    [void],
    "nonpayable"
  >;

  campaignBalances: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  campaignCounter: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string,
        boolean
      ] & {
        creator: string;
        title: string;
        description: string;
        targetAmount: bigint;
        deadline: bigint;
        active: boolean;
        withdrawn: boolean;
        totalRaised: string;
        isInitialized: boolean;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _targetAmount: BigNumberish,
      _duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  donate: TypedContractMethod<
    [_campaignId: BigNumberish, _encryptedAmount: BytesLike, _proof: BytesLike],
    [void],
    "payable"
  >;

  endCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveCampaigns: TypedContractMethod<[], [bigint[]], "view">;

  getAllCampaigns: TypedContractMethod<[], [bigint[]], "view">;

  getCampaignBalance: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getCampaignBasicInfo: TypedContractMethod<
    [_campaignId: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, bigint] & {
        creator: string;
        title: string;
        description: string;
        targetAmount: bigint;
        deadline: bigint;
        active: boolean;
        currentAmount: bigint;
      }
    ],
    "view"
  >;

  getDonationAmount: TypedContractMethod<
    [_campaignId: BigNumberish, _donor: AddressLike],
    [string],
    "view"
  >;

  getDonorsCount: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getEncryptedTotalRaised: TypedContractMethod<
    [_campaignId: BigNumberish],
    [string],
    "view"
  >;

  getProgressPercentage: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalCampaigns: TypedContractMethod<[], [bigint], "view">;

  isCampaignInitialized: TypedContractMethod<
    [_campaignId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestRefund: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_addEncrypted"
  ): TypedContractMethod<[a: BytesLike, b: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "_fromExternal"
  ): TypedContractMethod<
    [_encryptedAmount: BytesLike, _proof: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setupACL"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, donor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaignBalances"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string,
        boolean
      ] & {
        creator: string;
        title: string;
        description: string;
        targetAmount: bigint;
        deadline: bigint;
        active: boolean;
        withdrawn: boolean;
        totalRaised: string;
        isInitialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _targetAmount: BigNumberish,
      _duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _encryptedAmount: BytesLike, _proof: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "endCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveCampaigns"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllCampaigns"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignBalance"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCampaignBasicInfo"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean, bigint] & {
        creator: string;
        title: string;
        description: string;
        targetAmount: bigint;
        deadline: bigint;
        active: boolean;
        currentAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDonationAmount"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _donor: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDonorsCount"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTotalRaised"
  ): TypedContractMethod<[_campaignId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getProgressPercentage"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isCampaignInitialized"
  ): TypedContractMethod<[_campaignId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRefund"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignEnded"
  ): TypedContractEvent<
    CampaignEndedEvent.InputTuple,
    CampaignEndedEvent.OutputTuple,
    CampaignEndedEvent.OutputObject
  >;
  getEvent(
    key: "DonationMade"
  ): TypedContractEvent<
    DonationMadeEvent.InputTuple,
    DonationMadeEvent.OutputTuple,
    DonationMadeEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RefundIssued"
  ): TypedContractEvent<
    RefundIssuedEvent.InputTuple,
    RefundIssuedEvent.OutputTuple,
    RefundIssuedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignEnded(uint256)": TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;
    CampaignEnded: TypedContractEvent<
      CampaignEndedEvent.InputTuple,
      CampaignEndedEvent.OutputTuple,
      CampaignEndedEvent.OutputObject
    >;

    "DonationMade(uint256,address)": TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;
    DonationMade: TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;

    "FundsWithdrawn(uint256,address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RefundIssued(uint256,address)": TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
    RefundIssued: TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
  };
}
